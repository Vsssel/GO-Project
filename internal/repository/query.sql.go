// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"
)

const createTask = `-- name: CreateTask :exec

INSERT INTO tasks (title, status_id, user_id)
VALUES ($1, 1, $2)
`

type CreateTaskParams struct {
	Title  string
	UserID int32
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask, arg.Title, arg.UserID)
	return err
}

const deleteTask = `-- name: DeleteTask :exec

DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getAllTasks = `-- name: GetAllTasks :many

SELECT id, title, status_id, user_id FROM tasks
WHERE user_id = $1
`

func (q *Queries) GetAllTasks(ctx context.Context, userID int32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StatusID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const login = `-- name: Login :one

SELECT id, username, email, password FROM users 
WHERE email = $1
`

func (q *Queries) Login(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, login, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const signup = `-- name: Signup :exec

INSERT INTO users (username, email, password)
VALUES ($1, $2, $3)
`

type SignupParams struct {
	Username string
	Email    string
	Password string
}

func (q *Queries) Signup(ctx context.Context, arg SignupParams) error {
	_, err := q.db.ExecContext(ctx, signup, arg.Username, arg.Email, arg.Password)
	return err
}

const updateTasksStatus = `-- name: UpdateTasksStatus :exec

UPDATE tasks
SET status_id = $1
WHERE id = $2
`

type UpdateTasksStatusParams struct {
	StatusID int32
	ID       int32
}

func (q *Queries) UpdateTasksStatus(ctx context.Context, arg UpdateTasksStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTasksStatus, arg.StatusID, arg.ID)
	return err
}
