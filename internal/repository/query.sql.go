// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"
)

const createTask = `-- name: CreateTask :exec

INSERT INTO tasks (title, status_id)
VALUES ($1, 1)
`

func (q *Queries) CreateTask(ctx context.Context, title string) error {
	_, err := q.db.ExecContext(ctx, createTask, title)
	return err
}

const getAllCompletedTasks = `-- name: GetAllCompletedTasks :many

SELECT id, title, status_id FROM tasks 
WHERE status_id = 2
`

func (q *Queries) GetAllCompletedTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllCompletedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(&i.ID, &i.Title, &i.StatusID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCreatedTasks = `-- name: GetAllCreatedTasks :many

SELECT id, title, status_id FROM tasks 
WHERE status_id = 1
`

func (q *Queries) GetAllCreatedTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllCreatedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(&i.ID, &i.Title, &i.StatusID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTasks = `-- name: GetAllTasks :many

SELECT id, title, status_id FROM tasks
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(&i.ID, &i.Title, &i.StatusID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTasksStatus = `-- name: UpdateTasksStatus :exec

UPDATE tasks
SET status_id = $1
WHERE id = $2
`

type UpdateTasksStatusParams struct {
	StatusID int32
	ID       int32
}

func (q *Queries) UpdateTasksStatus(ctx context.Context, arg UpdateTasksStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTasksStatus, arg.StatusID, arg.ID)
	return err
}
